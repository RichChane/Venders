//
//  OOMDetector.mm
//  QQLeak
//
//  Created by rosen on 16/11/1.
//  Copyright © 2016年 tencent. All rights reserved.
//

#import <libkern/OSAtomic.h>
#include <sys/mman.h>
#include <mach/mach_init.h>
#import <mach/vm_statistics.h>
#import "zlib.h"
#import "stdio.h"
#import "AllocationStackLogger.h"
#import "QQLeakChecker.h"
#import "QQLeakPredefines.h"
#import "HighSpeedLogger.h"
#include "CMachOHelper.h"
#import "OOMDetector.h"
#include "CStacksHashmap.h"
#include "QQLeakStackLogging.h"
#import "OOMDetectorLogger.h"
#import "APMConfigureCenter.h"
#ifdef Build_For_Extern
#import "OOMStatisticsInfoCenter.h"
#endif
#ifdef Enable_Auto_Upload
#import "QQLeakZipArchive.h"
#import "QQLeakFileUploadCenter.h"
#import "QQLeakDeviceInfo.h"
#endif

//static
static OOMDetector *catcher;
static NSString *currentDir;

//global
size_t oom_threshold;
size_t chunk_threshold;
size_t vm_threshold;
HighSpeedLogger *normal_stack_logger;
BOOL enableOOMMonitor;
BOOL enableChunkMonitor;
BOOL enableVMMonitor;
BOOL needSysStack;
BOOL needStackWithoutAppStack;
size_t normal_size = 512*1024;
size_t chunk_size = 10*1024;
ChunkMallocCallback chunkMallocCallback;
malloc_logger_t** vm_sys_logger;

//extern
extern malloc_zone_t *memory_zone;
extern size_t max_stack_depth;
extern size_t vm_threshold;
extern CPtrsHashmap *vm_ptrs_hashmap;
extern CStacksHashmap *vm_stacks_hashmap;
extern OSSpinLock hashmap_spinlock;
extern OSSpinLock vm_hashmap_spinlock;
extern pthread_mutex_t vm_mutex;
extern pthread_mutex_t malloc_mutex;
NSString *oom_uin;
NSString *oom_appVersion;
NSString *oom_pid;


@interface OOMDetector()
{
    NSString *_normal_path;
    NSRecursiveLock *_flushLock;
#ifdef Build_For_Extern
    NSTimer *_timer;
    double _dumpLimit;
    BOOL _needAutoDump;
#endif
}

@end
@implementation OOMDetector

+(OOMDetector *)getInstance
{
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        catcher = [OOMDetector new];
    });
    return catcher;
}

-(id)init
{
    if(self = [super init]){
        NSArray *paths = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES);
        NSString *LibDirectory = [paths objectAtIndex:0];
        NSDateFormatter* df = [[NSDateFormatter new] autorelease];
        df.dateFormat = @"yyyyMMdd_HHmmssSSS";
        NSString *dateStr = [df stringFromDate:[NSDate date]];
        currentDir = [[LibDirectory stringByAppendingPathComponent:[NSString stringWithFormat:@"OOMDetector/%@",dateStr]] retain];
        _normal_path = [[currentDir stringByAppendingPathComponent:[NSString stringWithFormat:@"normal_malloc%@.log",dateStr]] retain];
        if(memory_zone == nil){
            memory_zone = malloc_create_zone(0, 0);
            malloc_set_zone_name(memory_zone, "OOMDetector");
        }
        _flushLock = [NSRecursiveLock new];
#ifdef BUILD_FOR_OTHER_APP
        [[APMConfigureCenter defaultCenter] loadConfigs];
#endif
    }
    return self;
}

-(void)registerLogCallback:(logCallback)logger
{
    oom_logger = logger;
}

-(void)startMaxMemoryStatistic:(double)overFlowLimit
{
#ifdef Build_For_Extern
    [[OOMStatisticsInfoCenter getInstance] startMemoryOverFlowMonitor:overFlowLimit];
#endif
}

-(BOOL)startMallocStackMonitor:(size_t)threshHoldInbytes needAutoDumpWhenOverflow:(BOOL)needAutoDump dumpLimit:(double)dumpLimit sampleInterval:(NSTimeInterval)sampleInterval
{
    if(!enableOOMMonitor){
        NSFileManager *fileManager = [NSFileManager defaultManager];
        if (![fileManager fileExistsAtPath:currentDir]) {
            [fileManager createDirectoryAtPath:currentDir withIntermediateDirectories:YES attributes:nil error:nil];
        }
        if (![fileManager fileExistsAtPath:_normal_path]) {
            [fileManager createFileAtPath:_normal_path contents:nil attributes:nil];
        }
        normal_stack_logger = createLogger(memory_zone, _normal_path, normal_size);
        if(normal_stack_logger != NULL){
            ptrs_hashmap_entrys = 250000;
            stacks_hashmap = new CStacksHashmap(50000);
            ptrs_hashmap = new CPtrsHashmap(ptrs_hashmap_entrys);
            enableOOMMonitor = YES;
        }
        else {
            enableOOMMonitor = NO;
        }
        if(enableOOMMonitor){
            default_zone = malloc_default_zone();
            current_mode = OOMDetectorMode;
            initAllImages();
            oom_threshold = threshHoldInbytes;
            malloc_logger = (malloc_logger_t *)oom_malloc_logger;
        }
    }
#ifdef Build_For_Extern
    if(needAutoDump){
        _dumpLimit = dumpLimit;
        _timer = [NSTimer timerWithTimeInterval:sampleInterval target:self selector:@selector(detectorTask) userInfo:nil repeats:YES];
        [[NSRunLoop mainRunLoop] addTimer:_timer forMode:NSRunLoopCommonModes];
        [_timer fire];
    }
#endif
    return enableOOMMonitor;
}

#ifdef Build_For_Extern
-(void)detectorTask
{
    double currentMemory = [QQLeakDeviceInfo appUsedMemory];
    //flush stack
    if(currentMemory > _dumpLimit){
        [self flush_allocation_stack];
    }
}
#endif

-(void)stopMallocStackMonitor
{
    if(enableOOMMonitor){
        malloc_logger = NULL;
        OSSpinLockLock(&hashmap_spinlock);
        CPtrsHashmap *tmp_ptr = ptrs_hashmap;
        CStacksHashmap *tmp_stack = stacks_hashmap;
        stacks_hashmap = NULL;
        ptrs_hashmap = NULL;
        OSSpinLockUnlock(&hashmap_spinlock);
        delete tmp_ptr;
        delete tmp_stack;
    }
#ifdef Build_For_Extern
    if(_timer){
        [_timer invalidate];
    }
#endif
}

-(void)setVMLogger:(void**)logger
{
    vm_sys_logger = (malloc_logger_t**)logger;
}

-(BOOL)startVMStackMonitor:(size_t)threshHoldInbytes
{
    if(!enableVMMonitor && vm_sys_logger){
        if(!normal_stack_logger){
            NSFileManager *fileManager = [NSFileManager defaultManager];
            if (![fileManager fileExistsAtPath:currentDir]) {
                [fileManager createDirectoryAtPath:currentDir withIntermediateDirectories:YES attributes:nil error:nil];
            }
            if (![fileManager fileExistsAtPath:_normal_path]) {
                [fileManager createFileAtPath:_normal_path contents:nil attributes:nil];
            }
            normal_stack_logger = createLogger(memory_zone, _normal_path, normal_size);
        }
        if(normal_stack_logger != NULL){
            vm_stacks_hashmap = new CStacksHashmap(1000);
            vm_ptrs_hashmap = new CPtrsHashmap(2000);
            enableVMMonitor = YES;
        }
        else {
            enableVMMonitor = NO;
        }
        if(enableVMMonitor){
            current_mode = OOMDetectorMode;
            initAllImages();
            vm_threshold = threshHoldInbytes;
            *vm_sys_logger = oom_vm_logger;
        }
    }
    return YES;
}

-(void)stopVMStackMonitor
{
    if(enableVMMonitor && vm_sys_logger){
        if(normal_stack_logger != NULL){
            OSSpinLockLock(&vm_hashmap_spinlock);
            CPtrsHashmap *tmp_ptr = vm_ptrs_hashmap;
            CStacksHashmap *tmp_stack = vm_stacks_hashmap;
            vm_ptrs_hashmap = NULL;
            vm_stacks_hashmap = NULL;
            OSSpinLockUnlock(&vm_hashmap_spinlock);
            delete tmp_ptr;
            delete tmp_stack;
        }
        *vm_sys_logger = NULL;
        enableVMMonitor = NO;
    }
}

-(BOOL)startSingleChunkMallocDetector:(size_t)threshHoldInbytes callback:(ChunkMallocCallback)callback
{
    if(!enableChunkMonitor){
        enableChunkMonitor = YES;
        if(enableChunkMonitor){
            default_zone = malloc_default_zone();
            current_mode = OOMDetectorMode;
            initAllImages();
            chunk_threshold = threshHoldInbytes;
            chunkMallocCallback = callback;
            malloc_logger = (malloc_logger_t *)oom_malloc_logger;
        }
    }
    return enableChunkMonitor;
}

-(void)stopSingleChunkMallocDetector
{
    if(!enableOOMMonitor && enableChunkMonitor){
        malloc_logger = NULL;
    }
    enableChunkMonitor = NO;
}

-(void)flush_allocation_stack
{
    [_flushLock lock];
    flush_allocation_stack();
    [_flushLock unlock];
}


-(void)uploadAllStackToAPM
{
#ifdef Enable_Auto_Upload
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        NSFileManager *fm = [NSFileManager defaultManager];
        NSString *OOMDataPath = [self OOMDataPath];
        NSString *currentLogDir = [self currentStackLogDir];
        NSArray *paths = [fm contentsOfDirectoryAtPath:OOMDataPath error:nil];
        for(NSString *path in paths)
        {
            NSString *fullPath = [OOMDataPath stringByAppendingPathComponent:path];
            BOOL isDir = NO;
            if([fm fileExistsAtPath:fullPath isDirectory:&isDir]){
                if(!isDir) continue;
                if(currentLogDir == nil || (currentLogDir != nil && ![fullPath isEqualToString:currentLogDir])){
                    size_t stack_size = 0;
                    NSDirectoryEnumerator *internal_enumerator = [fm enumeratorAtPath:fullPath];
                    NSString *internal_path = [internal_enumerator nextObject];
                    NSData* zipData  = nil;
                    QQLeakZipArchive* zipArc = [[QQLeakZipArchive new] autorelease];
                    NSString *zipPath = [self OOMZipPath];
                    if ([zipArc CreateZipFile:zipPath])
                    {
                        while(internal_path != nil){
                            NSString *internal_full_path = [fullPath stringByAppendingPathComponent:internal_path];
                            NSData *data = [NSData dataWithContentsOfFile:internal_full_path];
                            if(([internal_path hasPrefix:@"normal_malloc"]) && data.length > 0){
                                stack_size = strlen((char *)data.bytes);
                                if(stack_size > 0){
                                    NSData *newData = [NSData dataWithBytes:data.bytes length:stack_size];
                                    [zipArc addFileToZipWithData:newData fileName:[internal_full_path lastPathComponent]];
                                }
                                else {
                                    internal_path = [internal_enumerator nextObject];
                                    continue;
                                }
                            }
                            else {
                                [zipArc addFileToZipWithData:data fileName:[internal_full_path lastPathComponent]];
                            }
                            internal_path = [internal_enumerator nextObject];
                        }
                        [zipArc CloseZipFile];
                        zipData = [NSData dataWithContentsOfFile:zipPath];
                        [fm removeItemAtPath:zipPath error:nil];
                    }
                    if (stack_size > 0 && zipData && zipData.length > 0) {
                        NSDictionary *extra = [NSDictionary dictionaryWithObjectsAndKeys:[[UIDevice currentDevice] systemVersion],@"systemversion",oom_appVersion,@"appversion",[QQLeakDeviceInfo platform],@"Device",@"normal_malloc",@"type",[QQLeakDeviceInfo rdmuuid],@"uuid",nil];
                        [[QQLeakFileUploadCenter defaultCenter] uploadFileData:zipData uin:oom_uin pid:oom_pid plugin:@"9" extra:extra completionHandler:^(NSURLResponse *response, NSData *data, NSError *error){
                            NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *)response;
                            if(error){
                                OOM_Log("OOMDetector uploadStackToAPM failed:%ld, domain:%@",(long)error.code, error.domain);
                            }
                            else if(httpResponse.statusCode < 200 || httpResponse.statusCode > 300){
                                OOM_Log("OOMDetector uploadStackToAPM failed, http coded:%ld",(long)httpResponse.statusCode);
                            }
                            else {
                                NSString *server_msg = [[[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding] autorelease];
                                OOM_Log("OOMDetector uploadStackToAPM success:%@",server_msg);
                                [fm removeItemAtPath:fullPath error:nil];
                            }
                        }];
                    }
                }
            }
        }
    });
#endif
}

-(NSString *)OOMDataPath
{
    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES);
    NSString *LibDirectory = [paths objectAtIndex:0];
    return [LibDirectory stringByAppendingPathComponent:@"OOMDetector"];
}
                   
-(NSString *)OOMZipPath
{
    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES);
    NSString *LibDirectory = [paths objectAtIndex:0];
    NSString *dir = [LibDirectory stringByAppendingPathComponent:@"Caches/OOMTmp"];
    NSFileManager *fm = [NSFileManager defaultManager];
    if (![fm fileExistsAtPath:dir])
    {
        [fm createDirectoryAtPath:dir withIntermediateDirectories:YES attributes:nil error:nil];
    }
    return [dir stringByAppendingPathComponent:@"OOMData.zip"];
}

-(void)setUin:(NSString *)uin
{
    if(oom_uin){
        [oom_uin release];
    }
    oom_uin = [uin retain];
}

-(void)setAppversion:(NSString *)appversion
{
    if(oom_appVersion){
        [oom_appVersion release];
    }
    oom_appVersion = [appversion retain];
}


-(void)setPID:(NSString *)pID
{
    if(oom_pid){
        [oom_pid release];
    }
    oom_pid = [pID retain];
}

-(void)setMaxStackDepth:(size_t)depth
{
    if(depth > 0) max_stack_depth = depth;
}

-(void)setNeedSystemStack:(BOOL)isNeedSys
{
    needSysStack = isNeedSys;
}

-(void)setNeedStacksWithoutAppStack:(BOOL)isNeedStackWithoutAppStack
{
    needStackWithoutAppStack = isNeedStackWithoutAppStack;
}

-(NSString *)currentStackLogDir;
{
    return currentDir;
}

-(void)dealloc
{
    if(normal_stack_logger != NULL){
        munmap(normal_stack_logger->mmap_ptr , normal_stack_logger->mmap_size);
        normal_stack_logger->memory_zone->free(normal_stack_logger->memory_zone,normal_stack_logger);
    }
    [super dealloc];
}

@end

