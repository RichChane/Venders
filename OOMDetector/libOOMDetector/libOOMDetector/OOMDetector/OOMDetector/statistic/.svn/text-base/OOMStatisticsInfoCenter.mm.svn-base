//
//  OOMStatisticsInfoCenter.m
//  QQLeak
//
//  Created by rosen on 16/12/29.
//  Copyright © 2016年 tencent. All rights reserved.
//

#import "OOMStatisticsInfoCenter.h"
#import <mach/task.h>
#import <mach/mach.h>
#import <mach/mach_init.h>
#import <UIKit/UIkit.h>
#import "QQLeakDataUploadCenter.h"
#import "OOMDetectorLogger.h"

static OOMStatisticsInfoCenter *center;

double overflow_limit;

extern NSString *oom_uin;
extern NSString *oom_appVersion;
extern NSString *oom_pid;

@interface OOMStatisticsInfoCenter()
{
    double _singleLoginMaxMemory;
    NSTimeInterval _firstOOMTime;
    NSThread *_thread;
    NSTimer *_timer;
    BOOL _hasUpoad;
}

@end

@implementation OOMStatisticsInfoCenter

+(OOMStatisticsInfoCenter *)getInstance
{
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        center = [OOMStatisticsInfoCenter new];
    });
    return center;
}

-(void)startMemoryOverFlowMonitor:(double)overFlowLimit
{
    [self uploadLastData];
    overflow_limit = overFlowLimit;
    _thread = [[NSThread alloc] initWithTarget:self selector:@selector(threadMain) object:nil];
    [_thread setName:@"MemoryOverflowMonitor"];
    _timer = [[NSTimer timerWithTimeInterval:1.0 target:self selector:@selector(updateMemory) userInfo:nil repeats:YES] retain];
    [_thread start];
}

-(void)threadMain
{
    [[NSRunLoop currentRunLoop] addTimer:_timer forMode:NSRunLoopCommonModes];
    [[NSRunLoop currentRunLoop] run];
    [_timer fire];
}
               

-(void)stopMemoryOverFlowMonitor
{
    [_timer invalidate];
    [_timer release];
    if(_thread){
        [_thread release];
    }
}

-(void)updateMemory
{
    if([[UIApplication sharedApplication] applicationState] == UIApplicationStateActive)
    {
        double maxMemory = [self appMaxMemory];
        if(maxMemory){
            if(maxMemory > _singleLoginMaxMemory){
                NSLog(@"OOMStatisticsInfoCenter update maxMemory:%.2fMb",maxMemory);
                _singleLoginMaxMemory = maxMemory;
                [self saveLastSingleLoginMaxMemory];
            }
        }
    }
}

//触顶缓存逻辑
-(void)saveLastSingleLoginMaxMemory{
    if(_hasUpoad){
        NSString* currentMemory = [NSString stringWithFormat:@"%f", _singleLoginMaxMemory];
        NSString* overflowMemoryLimit =[NSString stringWithFormat:@"%f", overflow_limit];
        if(_singleLoginMaxMemory > overflow_limit){
            static BOOL isFirst = YES;
            if(isFirst){
                _firstOOMTime = [[NSDate date] timeIntervalSince1970];
                isFirst = NO;
            }
        }
        NSDictionary *minidumpdata = [NSDictionary dictionaryWithObjectsAndKeys:@"reserved",@"vcname",currentMemory,@"singleMemory",overflowMemoryLimit,@"threshold",[NSString stringWithFormat: @"%.2lf", _firstOOMTime],@"LaunchTime",nil];
        NSString *fileDir = [self singleLoginMaxMemoryDir];
        if (![[NSFileManager defaultManager] fileExistsAtPath:fileDir])
        {
            [[NSFileManager defaultManager] createDirectoryAtPath:fileDir withIntermediateDirectories:YES attributes:nil error:nil];
        }
        NSString *filePath = [fileDir stringByAppendingString:@"/apmLastMaxMemory.plist"];
        if(minidumpdata != nil){
            if([[NSFileManager defaultManager] fileExistsAtPath:filePath]){
                [[NSFileManager defaultManager] removeItemAtPath:filePath error:nil];
            }
            [minidumpdata writeToFile:filePath atomically:YES];
        }
    }

}

-(void)uploadLastData
{
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        NSString *filePath = [[self singleLoginMaxMemoryDir] stringByAppendingPathComponent:@"apmLastMaxMemory.plist"];
        NSDictionary *minidumpdata = [NSDictionary dictionaryWithContentsOfFile:filePath];
        _hasUpoad = YES;
        if([[NSFileManager defaultManager] fileExistsAtPath:filePath]){
            [[NSFileManager defaultManager] removeItemAtPath:filePath error:nil];
        }
        if(minidumpdata && [minidumpdata isKindOfClass:[NSDictionary class]])
        {
            NSString *memory = [minidumpdata objectForKey:@"singleMemory"];
            if(memory){
                NSDictionary *finalDic = [NSDictionary dictionaryWithObjectsAndKeys:minidumpdata,@"minidumpdata", nil];
                [[QQLeakDataUploadCenter defaultCenter] uploadPerformanceDataToAPM:finalDic p_id:oom_pid plugin:@"9" versionname:oom_appVersion uin:(oom_uin ? oom_uin : @"10000") completionHandler:^(NSURLResponse *response, NSData *data, NSError *error){
                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *)response;
                    if(error){
                        OOM_Log("OOMStatisticsInfoCenter uploadLastMaxMemory failed:%ld, domain:%s",(long)error.code, [error.domain UTF8String]);
                    }
                    else if(httpResponse.statusCode < 200 || httpResponse.statusCode > 300){
                        OOM_Log("OOMStatisticsInfoCenter uploadLastMaxMemory failed, http coded:%ld",(long)httpResponse.statusCode);
                    }
                    else {
                        OOM_Log("OOMStatisticsInfoCenter uploadLastMaxMemory success:%sMb",[memory UTF8String]);
                    }
                }];
            }
        }
    });
}

-(NSString*)singleLoginMaxMemoryDir
{
    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES);
    NSString *LibDirectory = [paths objectAtIndex:0];
    NSString *path = [LibDirectory stringByAppendingPathComponent:@"/Caches/Memory"];
    return path;
}

- (double)appMaxMemory
{
    mach_task_basic_info_data_t taskInfo;
    unsigned infoCount = sizeof(taskInfo);
    kern_return_t kernReturn = task_info(mach_task_self(),
                                         MACH_TASK_BASIC_INFO,
                                         (task_info_t)&taskInfo,
                                         &infoCount);
    
    if (kernReturn != KERN_SUCCESS
        ) {
        return NSNotFound;
    }
    return taskInfo.resident_size_max / 1024.0 / 1024.0;
}

@end
